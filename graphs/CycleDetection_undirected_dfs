// gfg : Detect cycle in an undirected graph 

class Solution
{
    //Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj)
    {
        // Code here
        boolean visited[] = new boolean[V];
        Arrays.fill(visited,false);
        
        
        for(int i = 0 ; i< adj.size() ; i++){
            if(!visited[i]){
                if(isCycleUtil(i,visited,-1,adj)) return true;
            }
        }
        return false;
    }
    
    public boolean isCycleUtil(int node , boolean visited[] , int parent, ArrayList<ArrayList<Integer>> adj){
        visited[node] = true;
        for(int x : adj.get(node)){
            if(visited[x] == true){
                if(x != parent) return true;
            }
            else {
                if(isCycleUtil(x,visited,node,adj)) return true;
            }
        }
        return false;
    }
}
