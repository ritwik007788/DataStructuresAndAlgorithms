// Leetcode #323

class Solution {
    public int countComponents(int n, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int d[] : edges){
            adj.get(d[0]).add(d[1]);
            adj.get(d[1]).add(d[0]);
        }
        boolean visited[] = new boolean[n];
        int count = 0;
        Arrays.fill(visited,false);
        for(int i = 0;i<n;i++){
            if(!visited[i]){
                dfs(i,visited,adj);
                count++;
            }
        }
        
        return count;
    }
    
    public void dfs(int node , boolean[] visited , ArrayList<ArrayList<Integer>> adj){
        visited[node] = true;
        for(int x : adj.get(node)){
            if(!visited[x]) dfs(x,visited,adj);
        }
    }
}
