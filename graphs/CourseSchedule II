// Leetcode #210

class Solution {
    
    Stack<Integer> st = new Stack<>();
    
    public int[] findOrder(int numCourses, int[][] prereq) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        
        for(int i = 0; i < numCourses ; i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i = 0; i<prereq.length ; i++ ){
            int pre = prereq[i][1];
            int post = prereq[i][0];
            adj.get(pre).add(post);
        }
        if(isCyclic(numCourses,adj)) return new int[]{};
        boolean visited[] = new boolean[numCourses];
        
        for(int i = 0 ; i < adj.size() ; i++){
            if(!visited[i]) dfs(i,visited,adj);
        }
        
        // reverse stack and return array
        int res[] = new int[numCourses];
        
        for(int i=0;i<numCourses;i++){
            res[i] = st.pop();
        }
        return res;
    }
    
    public void dfs(int i , boolean[] visited , ArrayList<ArrayList<Integer>> adj){
        visited[i] = true;
        for(int x : adj.get(i)){
            if(visited[x] == false ) dfs(x,visited,adj);
        }
        st.add(i);
    }
    
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj)
    {
        boolean vis[] = new boolean[V];
        boolean recStack[] = new boolean[V];
        
        for(int i=0;i<V;i++){
            if(isCyclicUtil(i, vis, recStack,adj)) return true; // dfs call
        }
        return false;
    }
    
    public boolean isCyclicUtil(int i,boolean[] vis,boolean[] recStack,ArrayList<ArrayList<Integer>> adj){
        
        if(recStack[i]) return true; // if we have the element in current stack
        if(vis[i]) return false; // if already visited and failed to find loop
        
        vis[i] = true;
        recStack[i] = true;
        
        for(int x : adj.get(i)){
            if(isCyclicUtil(x,vis,recStack,adj)) return true;
        }
        recStack[i] = false; // remove element from recStack
        return false;
    }
}
