// Leetcode 328

********************** METHOD 1 (LESS EFFICIENT) **********************

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null || head.next == null) return head;
        
        ListNode odd = new ListNode(0);
        ListNode even = new ListNode(0);
        ListNode p = head;
        ListNode q = head.next;
        odd.next = p;
        even.next = q;
        int f1=0,f2=0;
        while(f1==0 || f2==0){
            if(p.next!=null && p.next.next!=null){
                p.next = p.next.next;
                p = p.next;                
            }
            else f1 = 1 ;
            
            if(q.next!=null && q.next.next!=null){
                q.next = q.next.next;          
                q = q.next;  
            }
            
            else f2 = 1;
            
        }
        q.next = null;
        p.next = even.next;
        
        return odd.next;
        
    }
}

********************** METHOD 2 (MORE EFFICIENT) **********************

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null) return head;
        
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = even;
         // even!=null for odd loops and even.next!null for even loops
        while(even!=null && even.next!=null){
            odd.next = even.next;
            odd=odd.next;
            even.next = odd.next;
            even = even.next;
        }
        
        odd.next = evenHead;// conecting the LinkedLists
        return head;
    }
}
