// leetcode #79

class Solution {
    
    boolean visited[][] = new boolean[7][7]; // matrix size from constraints
    
    public boolean exist(char[][] board, String word) {
        int rows = board.length;
        int cols = board[0].length;
        char firstLetter = word.charAt(0);
        
        // searching for the 1st letter
        
        for(int i=0;i<rows;i++){
            for(int j =0;j<cols;j++){
                if(board[i][j]==firstLetter){
                    if(dfs(i,j,rows,cols,board,word,0)) return true;
                }
            }
        }
        
        return false;
        
    }
    
    public boolean dfs(int i,int j,int rows,int cols,char[][] board,String word,int index){
        if(index == word.length()) return true;
        
        if(i<0 || i>=rows || j<0 || j>=cols || visited[i][j]  || word.charAt(index) !=  board[i][j])
            return false;
        
        visited[i][j] = true;
        
        boolean exists = dfs(i+1,j,rows,cols,board,word,index+1) || 
            dfs(i-1,j,rows,cols,board,word,index+1) || 
            dfs(i,j+1,rows,cols,board,word,index+1) || 
            dfs(i,j-1,rows,cols,board,word,index+1);
        
        if (exists) return true;
        //else
        visited[i][j] = false;
        return false;
    }
}
