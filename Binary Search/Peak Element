// Leetcode #162

class Solution {
    public int findPeakElement(int[] nums) {
        int l = 0, r = nums.length - 1;
        int n = nums.length;
        
        if(n==1){
            return 0;
        }
        while(l<=r){
            int mid = l+(r-l)/2;
            
            if(mid>0 && mid<n-1){// avoiding edge conditions as they have different conditions
                if(nums[mid]>nums[mid+1] && nums[mid]>nums[mid-1]){// condition for peak
                    return mid;
                }
                
                if(nums[mid]>nums[mid+1]){
                    r=mid;// left side has more probability of peak
                }
                else{
                    l=mid+1; // right side has more probability of peak
                }
            }
            
            else if(mid==0){
                if(nums[0]>nums[1])return 0;
                else return 1;// in case of arr of size 2
            }
            else if (mid==n-1){
                if(nums[n-1]>nums[n-2]) return n-1;
                else return n-2; // in case of arr of size 2
            }
        }
        
        return -1;
    }
}
